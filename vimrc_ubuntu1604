set nocompatible              " be iMproved, required
filetype off                  " required

" 启用vundle来管理vim插件
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" 安装插件写在这之后

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" quick comment
Plugin 'scrooloose/nerdcommenter'

" auto complete
Plugin 'Valloric/YouCompleteMe'

" smart bracket
Plugin 'jiangmiao/auto-pairs'

" file tree
Plugin 'scrooloose/nerdtree'

" powerline
Plugin 'Lokaltog/vim-powerline'

" 安装插件写在这之前
call vundle#end()            " required
filetype plugin on    " required

" 常用命令
" :PluginList       - 查看已经安装的插件
" :PluginInstall    - 安装插件
" :PluginUpdate     - 更新插件
" :PluginSearch     - 搜索插件，例如 :PluginSearch xml就能搜到xml相关的插件
" :PluginClean      - 删除插件，把安装插件对应行删除，然后执行这个命令即可

" h: vundle         - 获取帮助

" vundle的配置到此结束，下面是你自己的配置

" row number and syntax
set number
set ruler

" tab related
set ts=4 
set sw=4
set expandtab 
set sts=4
set autoindent 

" turn off auto comment
autocmd FileType * setlocal formatoptions-=c formatoptions-=r formatoptions-=o

" turn off fcitx when switch to normal mode
let g:input_toggle = 1
function! Fcitx2en()
   let s:input_status = system("fcitx-remote")
   if s:input_status == 2
      let g:input_toggle = 1
      let l:a = system("fcitx-remote -c")
   endif
endfunction

function! Fcitx2zh()
   let s:input_status = system("fcitx-remote")
   if s:input_status != 2 && g:input_toggle == 1
      let l:a = system("fcitx-remote -o")
      let g:input_toggle = 0
   endif
endfunction

" set timeoutlen=10
autocmd InsertLeave * call Fcitx2en()
" autocmd InsertEnter * call Fcitx2zh()

" set default shell as zsh
set shell=/bin/zsh

" Nerdtree automatically
map <C-n> :NERDTreeToggle<CR>
"autocmd VimEnter * NERDTree
"wincmd w
"autocmd VimEnter * wincmd w
autocmd bufenter * if (winnr("$") == 1 && exists("b:NERDTree") && b:NERDTree.isTabTree()) | q | endif

" setup for powerline
set laststatus=2
set t_Co=256
let g:Powerline_symbols= 'unicode'
set encoding=utf8

noremap <C-p> "+p
